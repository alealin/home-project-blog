/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.18).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.softserveinc.ita.home.blog.service;

import java.math.BigDecimal;
import com.softserveinc.ita.home.blog.model.Comment;
import com.softserveinc.ita.home.blog.model.Error;
import com.softserveinc.ita.home.blog.model.Post;
import com.softserveinc.ita.home.blog.model.Role;
import com.softserveinc.ita.home.blog.model.User;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-04-27T00:59:28.741629100+03:00[Europe/Helsinki]")
@Api(value = "users", description = "the users API")
public interface UsersApi {

    @ApiOperation(value = "Create User", nickname = "createUser", notes = "Create a new User.", response = User.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "Users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "OK", response = User.class),
        @ApiResponse(code = 400, message = "The payload contains an error.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<User> createUser(@ApiParam(value = "" ,required=true )  @Valid @RequestBody User body
);


    @ApiOperation(value = "Get Comment by ID and Current User", nickname = "getCommentByCurrentUser", notes = "Retrieves an existing Comment associated with the specified ID and Current User.", response = Comment.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "Current User Comments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Comment.class),
        @ApiResponse(code = 400, message = "The payload contains an error.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized.", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/users/current/comments/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Comment> getCommentByCurrentUser(@ApiParam(value = "",required=true) @PathVariable("id") BigDecimal id
);


    @ApiOperation(value = "Get comments by Current User", nickname = "getCommentsByCurrentUser", notes = "Uses query keys to retrieve a subset of existing comments assosiated with Current User.", response = Comment.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "Current User Comments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Comment.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/users/current/comments",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Comment>> getCommentsByCurrentUser(@ApiParam(value = "") @Valid @RequestParam(value = "id", required = false) BigDecimal id
,@ApiParam(value = "In order to execute *asc*, you need to specify in the search *id* parameter. In order to complete the *desc* sorting must be specified in the query parameter *-id* ", allowableValues = "id, -id", defaultValue = "-id") @Valid @RequestParam(value = "sort", required = false, defaultValue="-id") String sort
,@ApiParam(value = "") @Valid @RequestParam(value = "page_num", required = false) Integer pageNum
,@ApiParam(value = "") @Valid @RequestParam(value = "page_size", required = false) Integer pageSize
);


    @ApiOperation(value = "Return current User", nickname = "getCurrentUser", notes = "Retrieves the current logged User.", response = User.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "Current User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class),
        @ApiResponse(code = 400, message = "The payload contains an error.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized.", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/users/current",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<User> getCurrentUser();


    @ApiOperation(value = "Get Post by ID and Current User", nickname = "getPostByCurrentUser", notes = "Retrieves an existing Post associated with the specified ID and Current User.", response = Post.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "Current User Posts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Post.class),
        @ApiResponse(code = 400, message = "The payload contains an error.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized.", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/users/current/posts/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Post> getPostByCurrentUser(@ApiParam(value = "",required=true) @PathVariable("id") BigDecimal id
);


    @ApiOperation(value = "Get posts by Current User", nickname = "getPostsByCurrentUser", notes = "Uses query keys to retrieve a subset of existing posts assosiated with Current User.", response = Post.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "Current User Posts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Post.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/users/current/posts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Post>> getPostsByCurrentUser(@ApiParam(value = "") @Valid @RequestParam(value = "id", required = false) BigDecimal id
,@ApiParam(value = "") @Valid @RequestParam(value = "tag_id", required = false) String tagId
,@ApiParam(value = "") @Valid @RequestParam(value = "tag_name", required = false) String tagName
,@ApiParam(value = "In order to execute *asc*, you need to specify in the search *id* or *title* parameter. In order to complete the *desc* sorting must be specified in the query parameter *-id* ", allowableValues = "id, -id, title, -title", defaultValue = "-id") @Valid @RequestParam(value = "sort", required = false, defaultValue="-id") String sort
,@ApiParam(value = "") @Valid @RequestParam(value = "page_num", required = false) Integer pageNum
,@ApiParam(value = "") @Valid @RequestParam(value = "page_size", required = false) Integer pageSize
);


    @ApiOperation(value = "Get User by ID", nickname = "getUser", notes = "Retrieves an existing User associated with the specified ID.", response = User.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "Users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class),
        @ApiResponse(code = 400, message = "The payload contains an error.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized.", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden.", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/users/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<User> getUser(@ApiParam(value = "",required=true) @PathVariable("id") BigDecimal id
);


    @ApiOperation(value = "Get User Role by ID", nickname = "getUserRole", notes = "Retrieves an existing User Role associated with the specified ID.", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "Users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = ""),
        @ApiResponse(code = 400, message = "The payload contains an error.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized.", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden.", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/users/{id}/role",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Void> getUserRole(@ApiParam(value = "",required=true) @PathVariable("id") BigDecimal id
);


    @ApiOperation(value = "Get users", nickname = "getUsers", notes = "Uses query keys to retrieve a subset of existing users.", response = User.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "Users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "The payload contains an error.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized.", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> getUsers(@ApiParam(value = "") @Valid @RequestParam(value = "id", required = false) BigDecimal id
,@ApiParam(value = "") @Valid @RequestParam(value = "name", required = false) String name
,@ApiParam(value = "In order to execute *asc*, you need to specify in the search *id* or *name* parameter. In order to complete the *desc* sorting must be specified in the query parameter *-id* ", allowableValues = "id, -id, name, -name", defaultValue = "-id") @Valid @RequestParam(value = "sort", required = false, defaultValue="-id") String sort
,@ApiParam(value = "") @Valid @RequestParam(value = "page_num", required = false) Integer pageNum
,@ApiParam(value = "") @Valid @RequestParam(value = "page_size", required = false) Integer pageSize
);


    @ApiOperation(value = "Remove Comment by Current User", nickname = "removeCommentByCurrentUser", notes = "Deletes a Comment associated with a specified ID and Current User.", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "Current User Comments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The request was succesfully processed."),
        @ApiResponse(code = 400, message = "The payload contains an error.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized.", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/users/current/comments/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeCommentByCurrentUser(@ApiParam(value = "",required=true) @PathVariable("id") BigDecimal id
);


    @ApiOperation(value = "Remove Post by Current User", nickname = "removePostByCurrentUser", notes = "Deletes a Post associated with a specified ID and Current User.", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "Current User Posts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The request was succesfully processed."),
        @ApiResponse(code = 400, message = "The payload contains an error.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized.", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/users/current/posts/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removePostByCurrentUser(@ApiParam(value = "",required=true) @PathVariable("id") BigDecimal id
);


    @ApiOperation(value = "Remove User", nickname = "removeUser", notes = "Deletes a User associated with a specified ID.", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "Users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The request was succesfully processed."),
        @ApiResponse(code = 400, message = "The payload contains an error.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized.", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden.", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/users/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeUser(@ApiParam(value = "",required=true) @PathVariable("id") BigDecimal id
);


    @ApiOperation(value = "Update Comment by Current User", nickname = "updateCommentByCurrentUser", notes = "Updates information on a Comment that exists in the system by the specified ID and Current User.", response = Comment.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "Current User Comments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Comment.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "The payload contains an error.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized.", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/users/current/comments/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<List<Comment>> updateCommentByCurrentUser(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Comment body
,@ApiParam(value = "",required=true) @PathVariable("id") BigDecimal id
);


    @ApiOperation(value = "Update Current User", nickname = "updateCurrentUser", notes = "Updates information on a Current User.", response = User.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "Current User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class),
        @ApiResponse(code = 400, message = "The payload contains an error.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized.", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/users/current",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<User> updateCurrentUser(@ApiParam(value = "" ,required=true )  @Valid @RequestBody User body
);


    @ApiOperation(value = "Update Post by Current User", nickname = "updatePostByCurrentUser", notes = "Updates information on a Post that exists in the system by the specified ID and Current User.", response = Post.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "Current User Posts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Post.class),
        @ApiResponse(code = 400, message = "The payload contains an error.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized.", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/users/current/posts/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Post> updatePostByCurrentUser(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Post body
,@ApiParam(value = "",required=true) @PathVariable("id") BigDecimal id
);


    @ApiOperation(value = "Update User", nickname = "updateUser", notes = "Updates information on a User that exists in the system by the specified ID.", response = User.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "Users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class),
        @ApiResponse(code = 400, message = "The payload contains an error.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized.", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden.", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/users/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<User> updateUser(@ApiParam(value = "" ,required=true )  @Valid @RequestBody User body
,@ApiParam(value = "",required=true) @PathVariable("id") BigDecimal id
);


    @ApiOperation(value = "Update User Role", nickname = "updateUserRole", notes = "Updates Role on a User that exists in the system by the specified ID.", response = Role.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "Users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Role.class),
        @ApiResponse(code = 400, message = "The payload contains an error.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized.", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden.", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/users/{id}/role",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Role> updateUserRole(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Role body
,@ApiParam(value = "",required=true) @PathVariable("id") BigDecimal id
);

}

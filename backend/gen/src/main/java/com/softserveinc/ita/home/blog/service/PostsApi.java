/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.18).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.softserveinc.ita.home.blog.service;

import java.math.BigDecimal;
import com.softserveinc.ita.home.blog.model.Comment;
import com.softserveinc.ita.home.blog.model.Error;
import com.softserveinc.ita.home.blog.model.Post;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-04-27T00:59:28.741629100+03:00[Europe/Helsinki]")
@Api(value = "posts", description = "the posts API")
public interface PostsApi {

    @ApiOperation(value = "Create Comment", nickname = "createComment", notes = "Create a new Comment.", response = Comment.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "Comments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "OK", response = Comment.class),
        @ApiResponse(code = 400, message = "The payload contains an error.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/posts/{post_id}/comments",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Comment> createComment(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Comment body
,@ApiParam(value = "",required=true) @PathVariable("post_id") BigDecimal postId
);


    @ApiOperation(value = "Create Post", nickname = "createPost", notes = "Create a new Post.", response = Post.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "Posts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "OK", response = Post.class),
        @ApiResponse(code = 400, message = "The payload contains an error.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/posts",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Post> createPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Post body
);


    @ApiOperation(value = "Get Comment by ID.", nickname = "getComment", notes = "Retrieves an existing Comment associated with the specified ID.", response = Comment.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "Comments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Comment.class),
        @ApiResponse(code = 400, message = "The payload contains an error.", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/posts/{post_id}/comments/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Comment> getComment(@ApiParam(value = "",required=true) @PathVariable("post_id") BigDecimal postId
,@ApiParam(value = "",required=true) @PathVariable("id") BigDecimal id
);


    @ApiOperation(value = "Get comments", nickname = "getComments", notes = "Uses query keys to retrieve a subset of existing comments.", response = Comment.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "Comments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Comment.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/posts/{post_id}/comments",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Comment>> getComments(@ApiParam(value = "",required=true) @PathVariable("post_id") BigDecimal postId
,@ApiParam(value = "") @Valid @RequestParam(value = "id", required = false) BigDecimal id
,@ApiParam(value = "") @Valid @RequestParam(value = "user_name", required = false) String userName
,@ApiParam(value = "") @Valid @RequestParam(value = "user_id", required = false) String userId
,@ApiParam(value = "In order to execute *asc*, you need to specify in the search *id* parameter. In order to complete the *desc* sorting must be specified in the query parameter *-id* ", allowableValues = "id, -id", defaultValue = "-id") @Valid @RequestParam(value = "sort", required = false, defaultValue="-id") String sort
,@ApiParam(value = "") @Valid @RequestParam(value = "page_num", required = false) Integer pageNum
,@ApiParam(value = "") @Valid @RequestParam(value = "page_size", required = false) Integer pageSize
);


    @ApiOperation(value = "Get Post by ID", nickname = "getPost", notes = "Retrieves an existing Post associated with the specified ID.", response = Post.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "Posts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Post.class),
        @ApiResponse(code = 400, message = "The payload contains an error.", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/posts/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Post> getPost(@ApiParam(value = "",required=true) @PathVariable("id") BigDecimal id
);


    @ApiOperation(value = "Get posts", nickname = "getPosts", notes = "Uses query keys to retrieve a subset of existing posts.", response = Post.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "Posts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Post.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/posts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Post>> getPosts(@ApiParam(value = "") @Valid @RequestParam(value = "id", required = false) BigDecimal id
,@ApiParam(value = "") @Valid @RequestParam(value = "tag_id", required = false) String tagId
,@ApiParam(value = "") @Valid @RequestParam(value = "tag_name", required = false) String tagName
,@ApiParam(value = "") @Valid @RequestParam(value = "user_id", required = false) String userId
,@ApiParam(value = "In order to execute *asc*, you need to specify in the search *id* or *title* parameter. In order to complete the *desc* sorting must be specified in the query parameter *-id* ", allowableValues = "id, -id, title, -title", defaultValue = "-id") @Valid @RequestParam(value = "sort", required = false, defaultValue="-id") String sort
,@ApiParam(value = "") @Valid @RequestParam(value = "page_num", required = false) Integer pageNum
,@ApiParam(value = "") @Valid @RequestParam(value = "page_size", required = false) Integer pageSize
);


    @ApiOperation(value = "Remove Comment", nickname = "removeComment", notes = "Deletes a Comment associated with a specified ID.", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "Comments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The request was succesfully processed."),
        @ApiResponse(code = 400, message = "The payload contains an error.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized.", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden.", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/posts/{post_id}/comments/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeComment(@ApiParam(value = "",required=true) @PathVariable("post_id") BigDecimal postId
,@ApiParam(value = "",required=true) @PathVariable("id") BigDecimal id
);


    @ApiOperation(value = "Remove Post", nickname = "removePost", notes = "Deletes a Post associated with a specified ID.", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "Posts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The request was succesfully processed."),
        @ApiResponse(code = 400, message = "The payload contains an error.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized.", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden.", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/posts/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removePost(@ApiParam(value = "",required=true) @PathVariable("id") BigDecimal id
);


    @ApiOperation(value = "Update Comment", nickname = "updateComment", notes = "Updates information on a Comment that exists in the system by the specified ID and post ID.", response = Comment.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "Comments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Comment.class),
        @ApiResponse(code = 400, message = "The payload contains an error.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized.", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden.", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/posts/{post_id}/comments/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Comment> updateComment(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Comment body
,@ApiParam(value = "",required=true) @PathVariable("post_id") BigDecimal postId
,@ApiParam(value = "",required=true) @PathVariable("id") BigDecimal id
);


    @ApiOperation(value = "Update Post", nickname = "updatePost", notes = "Updates information on a Post that exists in the system by the specified ID.", response = Post.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "Posts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Post.class),
        @ApiResponse(code = 400, message = "The payload contains an error.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized.", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden.", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/posts/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Post> updatePost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Post body
,@ApiParam(value = "",required=true) @PathVariable("id") BigDecimal id
);

}
